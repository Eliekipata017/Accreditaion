generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Chef_Etablissement {
  id_chef        Int             @id @default(autoincrement())
  nom            String
  email          String
  etablissements Etablissement[]
}

model Critere {
  id_critere   Int    @id @default(autoincrement())
  nom_critere  String
  type_critere String
}

model Demande {
  id_demande         Int          @id @default(autoincrement())
  date_demande       DateTime
  nom_etablissement  String
  adresse            String
  type_etablissement String
  statut             Int
  inspections        Inspection[] // Relation un-à-plusieurs (demande liée à plusieurs inspections)
  email              String
  nom                String
}

model Etablissement {
  id_etablissement   Int                @id @default(autoincrement())
  nom_etablissement  String
  type_etablissement String
  adresse            String
  chef               Chef_Etablissement @relation(fields: [chefId], references: [id_chef])
  chefId             Int
}

model Inspecteur {
  id_inspecteur Int                    @id @default(autoincrement())
  nom           String
  inspections   inspectionInspecteur[]
  type          Int
  compte        Compte?                @relation("InspecteurCompte") // Relation opposée ajoutée ici
}

model Inspection {
  id_inspection   Int                    @id @default(autoincrement())
  date_inspection DateTime
  type_inspection String
  statut          String
  id_directeur    Int?
  directeur       Directeur_General?     @relation("DirecteurGeneralInspections", fields: [id_directeur], references: [id_directeur])
  demandeId       Int // Lien vers la demande
  demande         Demande                @relation(fields: [demandeId], references: [id_demande])
  evaluations     Evaluation[]
  inspecteurs     inspectionInspecteur[]
}

model inspectionInspecteur {
  id           Int        @id @default(autoincrement())
  inspection   Inspection @relation(fields: [inspectionId], references: [id_inspection])
  inspectionId Int
  inspecteur   Inspecteur @relation(fields: [inspecteurId], references: [id_inspecteur])
  inspecteurId Int
}

model Evaluation {
  id_evaluation  Int        @id @default(autoincrement())
  note           Int
  observation    String
  recommandation String
  id_inspection  Int
  inspection     Inspection @relation(fields: [id_inspection], references: [id_inspection])
}

model Directeur_General {
  id_directeur Int          @id @default(autoincrement())
  nom          String
  prenom       String
  statut       String
  inspections  Inspection[] @relation("DirecteurGeneralInspections")
  compte       Compte?      @relation("DirecteurCompte") // Relation opposée ajoutée ici
}

model Admin {
  id     Int     @id @default(autoincrement())
  nom    String
  compte Compte? @relation("admincompte") // Relation opposée ajoutée ici
}

model Compte {
  id                 Int                @id @default(autoincrement())
  email              String
  password           String
  directeur_general  Directeur_General? @relation("DirecteurCompte", fields: [directeurGeneralId], references: [id_directeur])
  directeurGeneralId Int?               @unique
  inspecteur         Inspecteur?        @relation("InspecteurCompte", fields: [inspecteurId], references: [id_inspecteur])
  inspecteurId       Int?               @unique
  role               String
  idAdmin            Int?               @unique
  admin              Admin?             @relation("admincompte", fields: [idAdmin], references: [id])
}
